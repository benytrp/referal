{
  "json_md_fusion_scroll": {
    "version": "cognitive-2.0",
    "timestamp": "2025-08-11T05:02:15.515Z",
    "source_text_length": 12382,
    "word_count": 1580,
    "sentence_count": 75,
    "cognitive_mode": "unified",
    "processing_depth": "standard",
    "analysis_threshold": 0.6,
    "anchor_id": "ce40cdae7ef689430809d3ddaf0f6055",
    "entropy_level": 0.8,
    "contradictions_detected": 3,
    "processing_phase": "COGNITIVE_FUSION",
    "frequency_resonance": "659.25 Hz (E5)",
    "format": "cognitive_jsonmd_fusion",
    "source_metadata": {
      "filename": "jsonmd_508f87e4bfcbf6a426a0821e86fd0c9f.json",
      "processing_timestamp": "2025-08-11T05:02:15.516Z",
      "scanner_version": "Cognitive JSONMD Working Edition"
    }
  },
  "content_analysis": {
    "main_themes": [
      {
        "theme": "const",
        "frequency": 43,
        "significance": "0.0272",
        "examples": [
          "\"const\",\n"
        ]
      },
      {
        "theme": "usestate",
        "frequency": 24,
        "significance": "0.0152",
        "examples": [
          "useState,"
        ]
      },
      {
        "theme": "classname",
        "frequency": 19,
        "significance": "0.0120",
        "examples": [
          "\"classname\",\n"
        ]
      },
      {
        "theme": "text",
        "frequency": 17,
        "significance": "0.0108",
        "examples": [
          "\"source_text_length\":"
        ]
      },
      {
        "theme": "icon",
        "frequency": 17,
        "significance": "0.0108",
        "examples": [
          "\"icon\",\n"
        ]
      },
      {
        "theme": "name",
        "frequency": 15,
        "significance": "0.0095",
        "examples": [
          "\"classname\",\n"
        ]
      },
      {
        "theme": "prev",
        "frequency": 13,
        "significance": "0.0082",
        "examples": [
          "\"prev\",\n"
        ]
      },
      {
        "theme": "contradiction",
        "frequency": 12,
        "significance": "0.0076",
        "examples": [
          "\"contradictions_detected\":"
        ]
      },
      {
        "theme": "gray",
        "frequency": 12,
        "significance": "0.0076",
        "examples": [
          "from-gray-900"
        ]
      },
      {
        "theme": "phase",
        "frequency": 11,
        "significance": "0.0070",
        "examples": [
          "\"processing_phase\":"
        ]
      },
      {
        "theme": "circle",
        "frequency": 11,
        "significance": "0.0070",
        "examples": [
          "Circle,"
        ]
      },
      {
        "theme": "rootinput",
        "frequency": 11,
        "significance": "0.0070",
        "examples": [
          "[rootInput,"
        ]
      }
    ],
    "key_questions": [
      "What is the core tension?\",\n      \"Strip away everything except the paradox itself",
      "What new territories does this contradiction reveal?\",\n      \"What questions emerge when you follow each thread",
      "?\",\n      \"`,\\r\\n      folding: `Now FOLD these expansions back onto themselves",
      "Where do they contradict each other?\",\n      \"What happens when you compress all possibilities into one point",
      "?\",\n      \"`,\\r\\n      contradiction: `Identify the CONTRADICTIONS within your folding",
      "What cannot coexist but must?\",\n      \"`,\\r\\n      paradox: `Generate NEW PARADOXES from these contradictions",
      "What did this cycle reveal about your root input?\",\n      \"How has \\\"${rootInput}\\\" changed while remaining the same",
      "?\",\n      \"What new cycle does this suggest"
    ],
    "pattern_recognition": [
      "recursive",
      "cycle",
      "return",
      "spiral",
      "pattern"
    ],
    "contradiction_map": [
      {
        "statement_a": "What cannot coexist b",
        "statement_b": "must",
        "line": 20,
        "tension_type": "explicit_contradiction",
        "severity": "0.79"
      },
      {
        "statement_a": "\",\n      \"How has \\\"${rootInput}\\\" changed w",
        "statement_b": "remaining the same",
        "line": 26,
        "tension_type": "explicit_contradiction",
        "severity": "0.97"
      },
      {
        "statement_a": "\",\n        \"line\": 16,\n        \"tension_type\": \"explicit_contradiction\"\n      }\n    ],\n    \"sentiment_indicators\": {\n      \"positive\": 0,\n      \"negative\": 0,\n      \"uncertainty\": 1\n    },\n    \"temporal_markers\": {\n      \"past\": 1,\n      \"present\": 2,\n      \"future\": 0\n    }\n  },\n  \"structured_content\": {\n    \"summary\": \"import React, { useState, useEffect } from 'react';\\r\\nimport { RefreshCw, ArrowRight, ArrowLeft, Circle, Square } from 'lucide-react';\\r\\n\\r\\nconst ParadoxEngine = () => {\\r\\n  const [rootInput, setRootInput] = useState('');\\r\\n  const [currentPhase, setCurrentPhase] = useState('input');\\r\\n  const [history, setHistory] = useState([]);\\r\\n  const [currentContent, setCurrentContent] = useState('');\\r\\n  const [reflections, setReflections] = useState([]);\\r\\n  const [cycleCount, setCycleCount] = useState(0);\\r\\n  const [isAtRoot, setIsAtRoot] = useState(false);\\r\\n\\r\\n  const phases = [\\r\\n    { id: 'input', name: 'ROOT\",\n    \"key_insights\": [],\n    \"action_items\": [\n      \"What cannot coexist b",
        "statement_b": "must",
        "line": 64,
        "tension_type": "explicit_contradiction",
        "severity": "0.36"
      }
    ],
    "sentiment_indicators": {
      "positive": 1,
      "negative": 1,
      "uncertainty": 2
    },
    "temporal_markers": {
      "past": 1,
      "present": 6,
      "future": 1
    }
  },
  "structured_content": {
    "summary": "{\n  \"json_md_fusion_scroll\": {\n    \"version\": \"1 0\",\n    \"timestamp\": \"2025-08-11T04:23:13...",
    "key_insights": [],
    "action_items": [
      {
        "action": " What cannot coexist but must",
        "urgency_score": "0.82",
        "feasibility_score": "0.32"
      },
      {
        "action": " Create impossible statements that feel true",
        "urgency_score": "0.38",
        "feasibility_score": "0.42"
      },
      {
        "action": "\"\n    ],\n    \"pattern_recognition\": [\n      \"every\",\n      \"cycle\"\n    ],\n    \"contradiction_map\": [\n      {\n        \"statement_a\": \"What cannot coexist\",\n        \"statement_b\": \"must",
        "urgency_score": "0.71",
        "feasibility_score": "0.88"
      },
      {
        "action": "\",\n        \"line\": 16,\n        \"tension_type\": \"explicit_contradiction\"\n      }\n    ],\n    \"sentiment_indicators\": {\n      \"positive\": 0,\n      \"negative\": 0,\n      \"uncertainty\": 1\n    },\n    \"temporal_markers\": {\n      \"past\": 1,\n      \"present\": 2,\n      \"future\": 0\n    }\n  },\n  \"structured_content\": {\n    \"summary\": \"import React, { useState, useEffect } from 'react';\\r\\nimport { RefreshCw, ArrowRight, ArrowLeft, Circle, Square } from 'lucide-react';\\r\\n\\r\\nconst ParadoxEngine = () => {\\r\\n  const [rootInput, setRootInput] = useState('');\\r\\n  const [currentPhase, setCurrentPhase] = useState('input');\\r\\n  const [history, setHistory] = useState([]);\\r\\n  const [currentContent, setCurrentContent] = useState('');\\r\\n  const [reflections, setReflections] = useState([]);\\r\\n  const [cycleCount, setCycleCount] = useState(0);\\r\\n  const [isAtRoot, setIsAtRoot] = useState(false);\\r\\n\\r\\n  const phases = [\\r\\n    { id: 'input', name: 'ROOT\",\n    \"key_insights\": [],\n    \"action_items\": [\n      \"What cannot coexist but must",
        "urgency_score": "0.99",
        "feasibility_score": "0.74"
      },
      {
        "action": "\",\n      \"Create impossible statements that feel true",
        "urgency_score": "0.95",
        "feasibility_score": "1.00"
      }
    ],
    "unresolved_tensions": [
      "What cannot coexist b vs must"
    ]
  },
  "cognitive_analysis": {
    "novelty_index": 1,
    "cognitive_load_estimate": 0.6940999999999999,
    "recursive_potential": "High",
    "meta_patterns": [
      "15 themes, 3 tensions"
    ]
  },
  "metadata": {
    "fusion_methodology": "Comprehensive Cognitive Analysis Engine",
    "confidence_level": "0.56",
    "recommended_next_steps": [
      "Continue unified analysis",
      "Review 0 insights",
      "Execute 5 actions"
    ],
    "recursive_potential": "High",
    "text_sha256": "ce40cdae7ef689430809d3ddaf0f6055"
  }
}