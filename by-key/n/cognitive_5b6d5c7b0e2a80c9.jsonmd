{
  "json_md_fusion_scroll": {
    "version": "cognitive-2.0",
    "timestamp": "2025-08-11T05:05:24.885Z",
    "source_text_length": 4571,
    "word_count": 417,
    "sentence_count": 58,
    "cognitive_mode": "unified",
    "processing_depth": "standard",
    "analysis_threshold": 0.6,
    "anchor_id": "5b6d5c7b0e2a80c9c414dbb697460436",
    "entropy_level": 0.875,
    "contradictions_detected": 1,
    "processing_phase": "COGNITIVE_FUSION",
    "frequency_resonance": "659.25 Hz (E5)",
    "format": "cognitive_jsonmd_fusion",
    "source_metadata": {
      "filename": "class XLogicEngine.json",
      "processing_timestamp": "2025-08-11T05:05:24.885Z",
      "scanner_version": "Cognitive JSONMD Working Edition"
    }
  },
  "content_analysis": {
    "main_themes": [
      {
        "theme": "self",
        "frequency": 50,
        "significance": "0.1199",
        "examples": [
          "__init__(self,"
        ]
      },
      {
        "theme": "output",
        "frequency": 24,
        "significance": "0.0576",
        "examples": [
          "\\\"output\\\":"
        ]
      },
      {
        "theme": "entropy",
        "frequency": 12,
        "significance": "0.0288",
        "examples": [
          "\\\"entropy_thresholds\\\":"
        ]
      },
      {
        "theme": "contract",
        "frequency": 12,
        "significance": "0.0288",
        "examples": [
          "contract:"
        ]
      },
      {
        "theme": "phase",
        "frequency": 9,
        "significance": "0.0216",
        "examples": [
          "\\\"phase\\\":"
        ]
      },
      {
        "theme": "dict",
        "frequency": 8,
        "significance": "0.0192",
        "examples": [
          "Dict[str,"
        ]
      },
      {
        "theme": "append",
        "frequency": 7,
        "significance": "0.0168",
        "examples": [
          "self.thought_ledger.append({\\\"cycle\\\":"
        ]
      },
      {
        "theme": "reasoning_chain",
        "frequency": 6,
        "significance": "0.0144",
        "examples": [
          "self.reasoning_chain:"
        ]
      },
      {
        "theme": "thought_ledger",
        "frequency": 6,
        "significance": "0.0144",
        "examples": [
          "self.thought_ledger:"
        ]
      },
      {
        "theme": "update_ledger",
        "frequency": 6,
        "significance": "0.0144",
        "examples": [
          "self.update_ledger(\\\"Analyze"
        ]
      },
      {
        "theme": "datetime",
        "frequency": 6,
        "significance": "0.0144",
        "examples": [
          "datetime.datetime.now().isoformat()\r\n"
        ]
      },
      {
        "theme": "config",
        "frequency": 5,
        "significance": "0.0120",
        "examples": [
          "config:"
        ]
      }
    ],
    "key_questions": [],
    "pattern_recognition": [
      "recursive",
      "cycle",
      "return"
    ],
    "contradiction_map": [
      {
        "statement_a": "02  # Starting entropy\r\n        \r\n        w",
        "statement_b": "self",
        "line": 9,
        "tension_type": "explicit_contradiction",
        "severity": "0.65"
      }
    ],
    "sentiment_indicators": {
      "positive": 1,
      "negative": 0,
      "uncertainty": 0
    },
    "temporal_markers": {
      "past": 0,
      "present": 3,
      "future": 0
    }
  },
  "structured_content": {
    "summary": "class XLogicEngine:\r\n    def __init__(self, config: Dict[str, Any] = None):\r\n        self config = config or {\r\n            \\\"entropy_thresholds\\\": {\\\"high\\\": 0...",
    "key_insights": [],
    "action_items": [
      {
        "action": "execute()\r\n            self",
        "urgency_score": "0.98",
        "feasibility_score": "0.58"
      },
      {
        "action": "2)\r\n\r\n    def execute(self):\r\n        output = \\\"Executed operations in parallel sandboxes",
        "urgency_score": "0.52",
        "feasibility_score": "0.86"
      },
      {
        "action": "append({\\\"phase\\\": \\\"Execute\\\", \\\"output\\\": output})\r\n        self",
        "urgency_score": "0.33",
        "feasibility_score": "0.72"
      },
      {
        "action": "update_ledger(\\\"Execute\\\", \\\"execute_plan\\\", output)\r\n        self",
        "urgency_score": "0.40",
        "feasibility_score": "0.61"
      },
      {
        "action": "15))  # Stabilize\r\n\r\n    def mutate_branch(self):\r\n        output = \\\"Entropy high; created branch mutation",
        "urgency_score": "0.23",
        "feasibility_score": "0.54"
      },
      {
        "action": "isoformat()}\\\",\r\n            \\\"created\\\": datetime",
        "urgency_score": "0.84",
        "feasibility_score": "0.31"
      }
    ],
    "unresolved_tensions": []
  },
  "cognitive_analysis": {
    "novelty_index": 1,
    "cognitive_load_estimate": 0.25355,
    "recursive_potential": "Medium",
    "meta_patterns": [
      "15 themes, 1 tensions"
    ]
  },
  "metadata": {
    "fusion_methodology": "Comprehensive Cognitive Analysis Engine",
    "confidence_level": "0.69",
    "recommended_next_steps": [
      "Continue unified analysis",
      "Review 0 insights",
      "Execute 6 actions"
    ],
    "recursive_potential": "Medium",
    "text_sha256": "5b6d5c7b0e2a80c9c414dbb697460436"
  }
}