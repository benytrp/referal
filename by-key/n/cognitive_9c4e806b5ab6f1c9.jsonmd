{
  "json_md_fusion_scroll": {
    "version": "cognitive-2.0",
    "timestamp": "2025-08-11T05:05:31.935Z",
    "source_text_length": 25099,
    "word_count": 2838,
    "sentence_count": 329,
    "cognitive_mode": "unified",
    "processing_depth": "standard",
    "analysis_threshold": 0.6,
    "anchor_id": "9c4e806b5ab6f1c9d2d2ae14e866c7e4",
    "entropy_level": 0.898,
    "contradictions_detected": 1,
    "processing_phase": "COGNITIVE_FUSION",
    "frequency_resonance": "659.25 Hz (E5)",
    "format": "cognitive_jsonmd_fusion",
    "source_metadata": {
      "filename": "jsonmd_downloads_scanner_v_1_2 (1).html",
      "processing_timestamp": "2025-08-11T05:05:31.935Z",
      "scanner_version": "Cognitive JSONMD Working Edition"
    }
  },
  "content_analysis": {
    "main_themes": [
      {
        "theme": "const",
        "frequency": 77,
        "significance": "0.0271",
        "examples": [
          "const"
        ]
      },
      {
        "theme": "await",
        "frequency": 62,
        "significance": "0.0218",
        "examples": [
          "await"
        ]
      },
      {
        "theme": "class",
        "frequency": 42,
        "significance": "0.0148",
        "examples": [
          "class=\"wrap\">\n"
        ]
      },
      {
        "theme": "name",
        "frequency": 39,
        "significance": "0.0137",
        "examples": [
          "name=\"viewport\""
        ]
      },
      {
        "theme": "function",
        "frequency": 34,
        "significance": "0.0120",
        "examples": [
          "function"
        ]
      },
      {
        "theme": "border",
        "frequency": 33,
        "significance": "0.0116",
        "examples": [
          ":root{--primary:#00ffcc;--secondary:#00ffff;--accent:#ff66cc;--warning:#ffcc00;--danger:#ff4444;--bg:#0d0d0d;--bg2:#111;--border:#333;--fusion:#9966ff}\n"
        ]
      },
      {
        "theme": "text",
        "frequency": 32,
        "significance": "0.0113",
        "examples": [
          "text/markdown/HTML"
        ]
      },
      {
        "theme": "file",
        "frequency": 29,
        "significance": "0.0102",
        "examples": [
          "File"
        ]
      },
      {
        "theme": "return",
        "frequency": 26,
        "significance": "0.0092",
        "examples": [
          "return;"
        ]
      },
      {
        "theme": "span",
        "frequency": 23,
        "significance": "0.0081",
        "examples": [
          ".col-12{grid-column:span"
        ]
      },
      {
        "theme": "button",
        "frequency": 22,
        "significance": "0.0078",
        "examples": [
          "<button"
        ]
      },
      {
        "theme": "outhandle",
        "frequency": 22,
        "significance": "0.0078",
        "examples": [
          "outHandle"
        ]
      }
    ],
    "key_questions": [
      "(txt|md|markdown|html?|TXT|MD)$/i;\n  const SKIP_SUFFIX = /\\",
      "textContent = ms ? (ms + \" ms\") : \"—\"; }\n  function setAvgTick(){\n    if (",
      "replace(/<script[\\s\\S]*?<\\/script>/gi,\"\")",
      "replace(/<style[\\s\\S]*?<\\/style>/gi, \"\")",
      "?]*/g) || [])",
      "trim()? text",
      "length>160?\"…\":\"\"), key_insights: [], action_items: [], unresolved_tensions: []\n      },\n      metadata: {\n        fusion_methodology: \"Browser offline scan (Downloads folder)\", confidence_level: 1",
      "toLowerCase()) continue;\n        await scanDir(entry, joinRel(relPath, name), opts);\n      }\n    }\n  }\n\n  function joinRel(rel, name){ return rel ? `${rel}/${name}` : name; }\n\n  async function handleFile(entry, relPath, name, opts){\n    opts"
    ],
    "pattern_recognition": [
      "recursive",
      "repeat",
      "return",
      "pattern"
    ],
    "contradiction_map": [
      {
        "statement_a": "match(/\\b(b",
        "statement_b": "however|yet|although|despite|nevertheless|whereas)\\b/gi)||[])",
        "line": 150,
        "tension_type": "explicit_contradiction",
        "severity": "0.31"
      }
    ],
    "sentiment_indicators": {
      "positive": 1,
      "negative": 3,
      "uncertainty": 1
    },
    "temporal_markers": {
      "past": 1,
      "present": 7,
      "future": 1
    }
  },
  "structured_content": {
    "summary": "DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1 0\" />\n<title>JSONMD Downloads Scanner v1...",
    "key_insights": [],
    "action_items": [
      {
        "action": "getDirectoryHandle(name, { create:true });\n  }\n\n  async function atomicWriteJSON(dirHandle, fileName, obj){\n    const fh = await dirHandle",
        "urgency_score": "0.81",
        "feasibility_score": "0.21"
      },
      {
        "action": "getFileHandle(fileName, { create:true });\n    const ws = await fh",
        "urgency_score": "0.74",
        "feasibility_score": "0.92"
      },
      {
        "action": "createWritable();\n    try{\n      await ws",
        "urgency_score": "0.63",
        "feasibility_score": "0.54"
      },
      {
        "action": "getFileHandle(fname, { create:true });\n      let cur = \"\";\n      try{ cur = await (await fh",
        "urgency_score": "0.65",
        "feasibility_score": "0.02"
      },
      {
        "action": "createWritable();\n      await ws",
        "urgency_score": "0.91",
        "feasibility_score": "1.00"
      },
      {
        "action": "getFileHandle(fname, { create:true });\n      const file = await fh",
        "urgency_score": "0.43",
        "feasibility_score": "0.29"
      },
      {
        "action": "createElement('a');\n      a",
        "urgency_score": "0.61",
        "feasibility_score": "0.52"
      },
      {
        "action": "createObjectURL(blob);\n      a",
        "urgency_score": "0.41",
        "feasibility_score": "0.17"
      },
      {
        "action": "\"…\":\"\"), key_insights: [], action_items: [], unresolved_tensions: []\n      },\n      metadata: {\n        fusion_methodology: \"Browser offline scan (Downloads folder)\", confidence_level: 1",
        "urgency_score": "0.58",
        "feasibility_score": "0.17"
      },
      {
        "action": "0,\n        recommended_next_steps: [], recursive_potential: \"n/a\"\n      }\n    };\n  }\n\n  // Tiny structural validator (best-effort)\n  function validateJSONMD(obj){\n    const errors = [];\n    const must = (cond,msg)=>{ if(",
        "urgency_score": "0.60",
        "feasibility_score": "0.49"
      }
    ],
    "unresolved_tensions": []
  },
  "cognitive_analysis": {
    "novelty_index": 1,
    "cognitive_load_estimate": 1,
    "recursive_potential": "High",
    "meta_patterns": [
      "15 themes, 1 tensions"
    ]
  },
  "metadata": {
    "fusion_methodology": "Comprehensive Cognitive Analysis Engine",
    "confidence_level": "0.38",
    "recommended_next_steps": [
      "Continue unified analysis",
      "Review 0 insights",
      "Execute 10 actions"
    ],
    "recursive_potential": "High",
    "text_sha256": "9c4e806b5ab6f1c9d2d2ae14e866c7e4"
  }
}