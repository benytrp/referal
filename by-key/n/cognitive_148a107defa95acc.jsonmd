{
  "json_md_fusion_scroll": {
    "version": "cognitive-2.0",
    "timestamp": "2025-08-11T05:05:35.658Z",
    "source_text_length": 1213,
    "word_count": 166,
    "sentence_count": 16,
    "cognitive_mode": "unified",
    "processing_depth": "standard",
    "analysis_threshold": 0.6,
    "anchor_id": "148a107defa95acc297a1bc191b10344",
    "entropy_level": 0.976,
    "contradictions_detected": 1,
    "processing_phase": "COGNITIVE_FUSION",
    "frequency_resonance": "659.25 Hz (E5)",
    "format": "cognitive_jsonmd_fusion",
    "source_metadata": {
      "filename": "README for x Logic Engine.txt",
      "processing_timestamp": "2025-08-11T05:05:35.658Z",
      "scanner_version": "Cognitive JSONMD Working Edition"
    }
  },
  "content_analysis": {
    "main_themes": [
      {
        "theme": "logic",
        "frequency": 3,
        "significance": "0.0181",
        "examples": [
          "Logic"
        ]
      },
      {
        "theme": "engine",
        "frequency": 3,
        "significance": "0.0181",
        "examples": [
          "Engine\r\nOverview\r\nThe"
        ]
      },
      {
        "theme": "entropy",
        "frequency": 2,
        "significance": "0.0120",
        "examples": [
          "entropy"
        ]
      },
      {
        "theme": "mutates",
        "frequency": 2,
        "significance": "0.0120",
        "examples": [
          "mutates"
        ]
      },
      {
        "theme": "complexity",
        "frequency": 2,
        "significance": "0.0120",
        "examples": [
          "complexity"
        ]
      },
      {
        "theme": "readme",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "README"
        ]
      },
      {
        "theme": "overview",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "Engine\r\nOverview\r\nThe"
        ]
      },
      {
        "theme": "python",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "Python-based"
        ]
      },
      {
        "theme": "based",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "Python-based"
        ]
      },
      {
        "theme": "implementation",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "implementation"
        ]
      },
      {
        "theme": "autonomous",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "Autonomous"
        ]
      },
      {
        "theme": "planning",
        "frequency": 1,
        "significance": "0.0060",
        "examples": [
          "Planning"
        ]
      }
    ],
    "key_questions": [],
    "pattern_recognition": [
      "recursive",
      "loop",
      "cycle"
    ],
    "contradiction_map": [
      {
        "statement_a": "Inspired by Battle Creek's adaptive innovations, it mutates functions temporarily w",
        "statement_b": "preserving core stability",
        "line": 3,
        "tension_type": "explicit_contradiction",
        "severity": "0.35"
      }
    ],
    "sentiment_indicators": {
      "positive": 1,
      "negative": 0,
      "uncertainty": 0
    },
    "temporal_markers": {
      "past": 0,
      "present": 1,
      "future": 0
    }
  },
  "structured_content": {
    "summary": "README for <x> Logic Engine\r\nOverview\r\nThe <x> Logic Engine is a Python-based implementation of the Autonomous Planning Loop, triggered by the <x> directive  It enables self-directed execution for tasks like meta-analysis or paradox resolution, integrating entropy tracking, parallel branching, and MÃ¶bius sealing (SHA-256 hashes for recursive integrity)...",
    "key_insights": [],
    "action_items": [
      {
        "action": "README for <x> Logic Engine\r\nOverview\r\nThe <x> Logic Engine is a Python-based implementation of the Autonomous Planning Loop, triggered by the <x> directive",
        "urgency_score": "0.95",
        "feasibility_score": "0.43"
      },
      {
        "action": "\r\n\r\nCycle: Runs Analyze, Plan, Execute, Reflect phases until success or max_cycles",
        "urgency_score": "0.38",
        "feasibility_score": "0.16"
      }
    ],
    "unresolved_tensions": []
  },
  "cognitive_analysis": {
    "novelty_index": 1,
    "cognitive_load_estimate": 0.08565,
    "recursive_potential": "Medium",
    "meta_patterns": [
      "15 themes, 1 tensions"
    ]
  },
  "metadata": {
    "fusion_methodology": "Comprehensive Cognitive Analysis Engine",
    "confidence_level": "0.42",
    "recommended_next_steps": [
      "Continue unified analysis",
      "Review 0 insights",
      "Execute 2 actions"
    ],
    "recursive_potential": "Medium",
    "text_sha256": "148a107defa95acc297a1bc191b10344"
  }
}