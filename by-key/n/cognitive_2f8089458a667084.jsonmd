{
  "json_md_fusion_scroll": {
    "version": "cognitive-2.0",
    "timestamp": "2025-08-11T05:05:24.299Z",
    "source_text_length": 16710,
    "word_count": 2098,
    "sentence_count": 226,
    "cognitive_mode": "unified",
    "processing_depth": "standard",
    "analysis_threshold": 0.6,
    "anchor_id": "2f8089458a667084c839bceece84a6c9",
    "entropy_level": 0.905,
    "contradictions_detected": 1,
    "processing_phase": "COGNITIVE_FUSION",
    "frequency_resonance": "659.25 Hz (E5)",
    "format": "cognitive_jsonmd_fusion",
    "source_metadata": {
      "filename": "ai_studio_code.html",
      "processing_timestamp": "2025-08-11T05:05:24.299Z",
      "scanner_version": "Cognitive JSONMD Working Edition"
    }
  },
  "content_analysis": {
    "main_themes": [
      {
        "theme": "const",
        "frequency": 43,
        "significance": "0.0205",
        "examples": [
          "constraints."
        ]
      },
      {
        "theme": "class",
        "frequency": 34,
        "significance": "0.0162",
        "examples": [
          "class=\"wrap\">\n"
        ]
      },
      {
        "theme": "chunks",
        "frequency": 29,
        "significance": "0.0138",
        "examples": [
          "Chunks"
        ]
      },
      {
        "theme": "border",
        "frequency": 24,
        "significance": "0.0114",
        "examples": [
          "border-box;"
        ]
      },
      {
        "theme": "body",
        "frequency": 23,
        "significance": "0.0110",
        "examples": [
          "body"
        ]
      },
      {
        "theme": "title",
        "frequency": 22,
        "significance": "0.0105",
        "examples": [
          "/>\n<title>Chunk"
        ]
      },
      {
        "theme": "chunk",
        "frequency": 21,
        "significance": "0.0100",
        "examples": [
          "/>\n<title>Chunk"
        ]
      },
      {
        "theme": "hashes",
        "frequency": 19,
        "significance": "0.0091",
        "examples": [
          "hashes"
        ]
      },
      {
        "theme": "text",
        "frequency": 18,
        "significance": "0.0086",
        "examples": [
          "text-transform:"
        ]
      },
      {
        "theme": "button",
        "frequency": 17,
        "significance": "0.0081",
        "examples": [
          "<button"
        ]
      },
      {
        "theme": "document",
        "frequency": 17,
        "significance": "0.0081",
        "examples": [
          "document.getElementById('source'),\n"
        ]
      },
      {
        "theme": "length",
        "frequency": 16,
        "significance": "0.0076",
        "examples": [
          "(cur.length)"
        ]
      }
    ],
    "key_questions": [
      "encode(x);\nasync function sha256Hex(input) {\n  const data = typeof input === 'string' ? utf8(input) : input;\n  const buf = await crypto",
      "== 'object') return typeof x === 'string' ? normalizeString(x) : x;\n    if (Array",
      "length <= max) { buf = buf ? buf + \"\\n\\n\" + p : p; }\n      else { if (buf) chunks",
      "split(/(?<=[",
      "?=[A-Z0-9\\[\\(])/);\n    const chunks = [];\n    for(let i = 0; i < sents",
      "length <= 80 ? firstLine : firstLine",
      "length > 140 ? '…' : ''}</td><td class=\"small\">${esc(istr)}</td><td class=\"small\">${h"
    ],
    "pattern_recognition": [
      "return"
    ],
    "contradiction_map": [
      {
        "statement_a": "length; i++){\n      let buf = ''; let j = i;\n      w",
        "statement_b": "j < sents",
        "line": 99,
        "tension_type": "explicit_contradiction",
        "severity": "0.79"
      }
    ],
    "sentiment_indicators": {
      "positive": 0,
      "negative": 0,
      "uncertainty": 0
    },
    "temporal_markers": {
      "past": 0,
      "present": 3,
      "future": 2
    }
  },
  "structured_content": {
    "summary": "DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-g\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Chunk Reflector — I‑Statement Hasher v2 (Offline)</title>\n<style>\n  :root {\n    --bg: #0a0e18; --panel: #0f1526; --muted: #9fb0d1; --ink: #e7f0ff; --acc: #7aa2ff; --ok: #3ecf8e; --warn: #f5a524; --outline: rgba(255,255,255, 08); --shadow: rgba(0,0,0,...",
    "key_insights": [],
    "action_items": [
      {
        "action": "</div>\n      <textarea id=\"tmpl\" style=\"min-height:170px\">I will analyze chunk {index} (\"{title}\") to identify key entities and constraints",
        "urgency_score": "0.27",
        "feasibility_score": "0.50"
      },
      {
        "action": " My analysis will be based on the content whose integrity is confirmed by the hash prefix {hash_short}",
        "urgency_score": "0.90",
        "feasibility_score": "0.48"
      },
      {
        "action": "createObjectURL(blob);\n    const a = Object",
        "urgency_score": "0.75",
        "feasibility_score": "0.09"
      },
      {
        "action": "createElement('a'), { href: url, download: filename });\n    document",
        "urgency_score": "1.00",
        "feasibility_score": "0.54"
      },
      {
        "action": "createElement('tr');\n    const istr = S",
        "urgency_score": "0.26",
        "feasibility_score": "0.74"
      },
      {
        "action": "hasHashes;\n}\n\n// --- CORE ACTIONS ---\nfunction doChunk() {\n  const text = D",
        "urgency_score": "0.46",
        "feasibility_score": "0.40"
      },
      {
        "action": "length} chunks created",
        "urgency_score": "0.87",
        "feasibility_score": "0.75"
      },
      {
        "action": "chunks[i];\n    // Step 1: Create a preliminary hash of the chunk content itself",
        "urgency_score": "0.58",
        "feasibility_score": "0.29"
      },
      {
        "action": "push(instructionHash);\n  }\n\n  // Step 4: Create the final seal by hashing the concatenated list of all instruction hashes",
        "urgency_score": "0.62",
        "feasibility_score": "0.50"
      },
      {
        "action": "hashlist:draft/v1',\n    '## directives',\n    'mode: execute',\n    'format: markdown',\n    '',\n    '## payload",
        "urgency_score": "0.32",
        "feasibility_score": "0.64"
      }
    ],
    "unresolved_tensions": []
  },
  "cognitive_analysis": {
    "novelty_index": 1,
    "cognitive_load_estimate": 0.8605,
    "recursive_potential": "Medium",
    "meta_patterns": [
      "15 themes, 1 tensions"
    ]
  },
  "metadata": {
    "fusion_methodology": "Comprehensive Cognitive Analysis Engine",
    "confidence_level": "0.43",
    "recommended_next_steps": [
      "Continue unified analysis",
      "Review 0 insights",
      "Execute 10 actions"
    ],
    "recursive_potential": "Medium",
    "text_sha256": "2f8089458a667084c839bceece84a6c9"
  }
}