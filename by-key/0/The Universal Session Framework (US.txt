The Universal Session Framework (USF) v2.0.0
The Universal Session Framework (USF) is a production-grade Python framework for building and operating multi-model AI infrastructure. It encapsulates the core principles of the Five-Layer Architecture to ensure that AI-driven processes are auditable, deterministic, and self-optimizing.

Core Concept: CoT Logic and Portable Artifacts
The USF operates on a Chain of Thought (CoT) logic model, where every decision and action is transparently documented in a portable JSON artifact. These artifacts serve as a single source of truth, containing all configuration data, processing history, and validation metrics needed to reproduce a session or audit its results.

The Five-Layer Architecture in Action
The USF is structured around five core layers that guide a task from a problem statement to a final, validated output.

Problem Definition: This layer is powered by a Prompt Optimization Bridge that systematically analyzes content and selects the most effective AI prompt from a predefined library. This ensures that every task begins with a scientifically grounded and optimized instruction.

Deterministic Orchestration: This is the core engine of the USF. It intelligently routes tasks to a fleet of AI models (e.g., Claude, GPT, local models) using load balancing, failover, and circuit breaker patterns. This layer guarantees reliable and predictable execution.

Embedded Validation: Every model response is subjected to a battery of statistical and logical checks. This layer generates a performance report with metrics like accuracy, latency, and coherence, providing the data necessary for informed decisions.

Policy Enforcement: The Policy Engine makes automated decisions (SHIP, ITERATE, or ROLLBACK) based on the performance metrics from Layer 3 and pre-defined thresholds. This eliminates human lag and ensures the system maintains a high standard of quality.

Presentation Abstraction: The final outputs are formatted for various audiences. Whether for an executive summary, a technical report, or operational alerts, this layer ensures that the results are tailored to the consumer without altering the underlying data.

How to Use the Framework
To get started, you'll need the usf_framework_v2.json artifact (provided above) and the usf_engine.py Python script (provided below).

Save the Artifact: Save the JSON schema above as a file named usf_framework_v2.json.

Save the Engine: Save the Python code below as a file named usf_engine.py.

Run the Demonstration: Execute the script from your command line to see a full demonstration of the Five-Layer Architecture.

python usf_engine.py demo

This will run a full simulation, including chunking a sample HTML document, processing the chunks through the multi-model orchestrator, and generating a final report.